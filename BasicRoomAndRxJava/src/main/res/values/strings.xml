<resources>
    <string name="app_name">Room &amp; RxJava Sample</string>

    <string name="website">https://github.com/googlesamples/android-architecture-components/tree/master/BasicRxJavaSample</string>
    <string name="readme">
        Website Address:
        \n
        @string/website
        \n\n
        Title:
        \n
        Room And RxJava Sample
        \n\t
        This is an API sample to showcase how to implement observable queries in Room, with RxJava\'s Flowable objects.

        \n
        Introduction:
        \n\t
        Functionality:
        \n\t\t
        The sample app shows an editable user name, stored in the database.
        \n\t
        Implementation:
        \n\t
        Data layer:
        \n\t\t
        The database is created using Room and has one entity: a User. Room generates the corresponding SQLite table at runtime.
        \n\t\t
        Queries are executed in the UserDao class. The user retrieval is done via an observable query
        implemented using a Flowable. Every time the user data is updated, the Flowable object will
        emit automatically, allowing to update the UI based on the latest data. The Flowable will
        emit only when the query result contains at least a row. When there is no data to match the query,
        the Flowable will not emit.
        \n\t
        Presentation layer:
        \n\t\t
        The app has a main Activity that displays the data. The Activity works with a ViewModel to do the following:
        \n\t\t\t
        subscribe to the emissions of the user name and update the UI every time there is a new user name emitted
        n\t\t\t
        notify the ViewModel when the "Update" button is pressed and pass the new user name. The ViewModel
        works with the data source to get and save the data.
        \n\t\t
        Room guarantees that the observable query will be triggered on a background thread.
        In the Activity, the Flowable events are set to be received on the main thread, so the UI can be updated.
        The insert query is synchronous so it\'s wrapped in a Completable and executed on a background thread.
        On completion, the Activity is notified on the main thread.

    </string>


    <string name="update_user">Update username</string>
</resources>
